package com.design23.group3behavior.b2Observer;
/***
  * @Author: fu.xc
  * @Description:
 * 观察者模式也叫做发布/订阅模型（Publish/Subscribe）
 *
 * ● Subject被观察者
 * 定义被观察者必须实现的职责，它必须能够动态地增加、取消观察者。它一般是抽象类或者是实现类，仅仅完成作为被观察者必须实现的职责：管理观察者并通知观察者。
 *
 * ● Observer观察者
 * 观察者接收到消息后，即进行update（更新方法）操作，对接收到的信息进行处理。
 *
 * ● ConcreteSubject具体的被观察者
 * 定义被观察者自己的业务逻辑，同时定义对哪些事件进行通知。
 *
 * ● ConcreteObserver具体的观察者
 * 每个观察在接收到消息后的处理反应是不同，各个观察者有自己的处理逻辑。
  * @Date: 2020/12/18
  **/

//缺点
//观察者模式需要考虑一下开发效率和运行效率问题，一个被观察者，多个观察者，开发和调试就会比较复杂，
// 而且在Java中消息的通知默认是顺序执行，一个观察者卡壳，会影响整体的执行效率。在这种情况下，一般考虑采用异步的方式。
//
//多级触发时的效率更是让人担忧，大家在设计时注意考虑。